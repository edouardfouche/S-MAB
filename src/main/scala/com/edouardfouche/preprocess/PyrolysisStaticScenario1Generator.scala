/*
 * Copyright (C) 2018 Edouard Fouch√©
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package com.edouardfouche.preprocess

import breeze.stats.distributions.{Bernoulli, RandBasis, ThreadLocalRandomGenerator}
import org.apache.commons.math3.random.MersenneTwister

/**
  * A scenario that generate a static scenario from the weights we obtain in the real world
  * (In practice, we don't use it)
 */
object PyrolysisStaticScenario1Generator extends Scenario{
  val id = "PyrolysisStaticScenario1Generator" // the stationary case
  val d = 190
  /**
    * generate data
    * @return A 2-D Array of Double containing the values from the csv. (row oriented)
    */
  def generate(rand: RandBasis=
    new RandBasis(new ThreadLocalRandomGenerator(new MersenneTwister(scala.util.Random.nextInt)))): Array[Array[Double]] = {
    // This array are the normalized means of the rewards of the 190 pairs in the pyrolysis data when we consider \Gamma > 2.
    val means = Array(0.776648546443, 0.613802883479, 0.591349562751, 0.389033325455, 0.384542661309, 0.354289766013,
      0.552824391397, 0.546206570551, 0.437721578823, 0.375088631529, 0.368707161428, 0.376743086741, 0.305601512645,
      0.233750886315, 0.318837154337, 0.685653509809, 0.715433703616, 0.538643346727, 0.380997400142, 0.506263294729,
      0.387615220988, 0.000236350744505, 0.00543606712361, 0.000709052233515, 0.00567241786812, 0.0125265894588, 0.0,
      0.0108721342472, 0.669581659182, 0.691798629166, 0.766249113685, 0.346017489955, 0.508154100685, 0.35783502718,
      0.664145592059, 0.00165445521153, 0.657764121957, 0.664854644292, 0.493736705271, 0.354762467502, 0.472228787521,
      0.35098085559, 0.598676435831, 0.0111084849917, 0.527771212479, 0.633419995273, 0.637674308674, 0.584022689671,
      0.368470810683, 0.512644764831, 0.342944930277, 0.62278421177, 0.00236350744505, 0.629165681872, 0.54880642874,
      0.727487591586, 0.748759158591, 0.769794374852, 0.370834318128, 0.516190025999, 0.348617348145, 0.67998109194,
      0.00165445521153, 1.0, 0.556369652564, 0.600567241787, 0.222642401324, 0.226187662491, 0.206570550697,
      0.1311746632, 0.176554006145, 0.0999763649255, 0.270621602458, 0.0, 0.227369416214, 0.19829827464, 0.231151028126,
      0.227369416214, 0.154573386906, 0.183880879225, 0.154100685417, 0.0772866934531, 0.165209170409, 0.0522335145356,
      0.196643819428, 0.000945402978019, 0.172772394233, 0.11912077523, 0.103994327582, 0.1290475065, 0.0153627983928,
      0.806192389506, 0.813046561097, 0.648546442921, 0.39399669109, 0.55826045852, 0.397541952257, 0.75915859135,
      0.00590876861262, 0.75915859135, 0.679744741196, 0.705979673836, 0.801465374616, 0.2602221697, 0.265658236823,
      0.614748286457, 0.616875443158, 0.390924131411, 0.320727960293, 0.421649728197, 0.224296856535, 0.522098794611,
      0.000236350744505, 0.447175608603, 0.45592058615, 0.457102339872, 0.413613802883, 0.104467029071, 0.049633656346,
      0.632710943039, 0.791538643347, 0.79697471047, 0.892224060506, 0.358780430158, 0.514299220043, 0.271567005436,
      0.659654927913, 0.0, 0.927203970693, 0.548097376507, 0.610493973056, 0.819191680454, 0.127629402033,
      0.0990309619475, 0.86622547861, 0.331363743796, 0.788229732924, 0.81375561333, 0.629874734105, 0.401323564169,
      0.588040652328, 0.429449302765, 0.765776412196, 0.00874497754668, 0.7806665091, 0.679035688962, 0.683999054597,
      0.840699598204, 0.246277475774, 0.259276766722, 0.851571732451, 0.663436539825, 0.860316709998, 0.0574332309147,
      0.0612148428268, 0.0415977310329, 0.0389978728433, 0.0600330891042, 0.0271803356181, 0.112030252895, 0.0,
      0.0706688726069, 0.0900496336563, 0.0820137083432, 0.0657055069723, 0.0319073505082, 0.0125265894588,
      0.07397778303, 0.0226896714725, 0.0363980146537, 0.0758685889861, 0.178208461357, 0.199480028362, 0.100449066415,
      0.149846372016, 0.207043252186, 0.0798865516426, 0.187189789648, 0.0, 0.116520917041, 0.198534625384,
      0.16473646892, 0.121484282675, 0.0328527534862, 0.00898132829118, 0.197825573151, 0.0879224769558,
      0.0692507681399, 0.197116520917, 0.00330891042307)

    /** // There are the original means, note that the signal is too week so that the scaling bandit would never increase
    val means = Array(0.544129822818, 0.430038085776, 0.414307004471, 0.272561682398, 0.269415466137, 0.248219903958,
      0.387315780758, 0.382679251532, 0.30667329028, 0.262791852956, 0.258320914059, 0.263950985262, 0.214108296076,
      0.1637688359, 0.223381354529, 0.480377545951, 0.501241927471, 0.377380360987, 0.266931611194, 0.354694485842,
      0.271568140421, 0.000165590329525, 0.00380857757907, 0.000496770988574, 0.00397416790859, 0.00877628746481,
      0.0, 0.00761715515814, 0.469117403544, 0.484682894519, 0.536843848319, 0.242424242424, 0.356019208478,
      0.2507037589, 0.465308825965, 0.00115913230667, 0.460837887067, 0.465805596953, 0.345918198377, 0.248551084617,
      0.33084947839, 0.245901639344, 0.419440304686, 0.00778274548766, 0.369763205829, 0.443782083126, 0.446762709058,
      0.409173704256, 0.258155323729, 0.359165424739, 0.24027156814, 0.436330518298, 0.00165590329525, 0.440801457195,
      0.384500745156, 0.509687034277, 0.524590163934, 0.539327703262, 0.259811227024, 0.361649279682, 0.244245736049,
      0.476403378043, 0.00115913230667, 0.700612684219, 0.389799635701, 0.420765027322, 0.155986090412, 0.158469945355,
      0.144725948005, 0.0919026328862, 0.123695976155, 0.070044709389, 0.189600927306, 0.0, 0.159297897003,
      0.138930286471, 0.161947342275, 0.159297897003, 0.108296075509, 0.12882927637, 0.10796489485, 0.0541480377546,
      0.115747640338, 0.036595462825, 0.137771154165, 0.000662361318099, 0.121046530883, 0.0834575260805,
      0.0728597449909, 0.0904123199205, 0.0107633714191, 0.564828614009, 0.569630733565, 0.454379864216,
      0.276039079318, 0.391124358337, 0.278522934261, 0.531876138434, 0.00413975823812, 0.531876138434,
      0.476237787713, 0.49461831429, 0.561516807418, 0.182314952807, 0.186123530386, 0.430700447094, 0.43219076006,
      0.273886405034, 0.224706077165, 0.295413147872, 0.157145222719, 0.36578903792, 0.000165590329525, 0.313296903461,
      0.319423745653, 0.320251697301, 0.289783076668, 0.0731909256499, 0.0347739692002, 0.443285312138, 0.554562013578,
      0.558370591157, 0.625103493956, 0.251366120219, 0.360324557046, 0.190263288624, 0.462162609704, 0.0,
      0.649610862726, 0.384003974168, 0.427719821162, 0.573936082133, 0.0894187779434, 0.0693823480709, 0.606888557708,
      0.232157641994, 0.552243748965, 0.570127504554, 0.441298228183, 0.281172379533, 0.411988739858, 0.300877628746,
      0.53651266766, 0.00612684219242, 0.54694485842, 0.475741016725, 0.479218413645, 0.58900480212, 0.172545123365,
      0.181652591489, 0.596621957278, 0.464812054976, 0.60274879947, 0.0402384500745, 0.0428878953469, 0.0291438979964,
      0.0273224043716, 0.0420599436993, 0.0190428878953, 0.0784898161947, 0.0, 0.0495115085279, 0.0630899155489,
      0.0574598443451, 0.0460341116079, 0.0223546944858, 0.00877628746481, 0.0518297731412, 0.0158966716344,
      0.0255009107468, 0.0531544957774, 0.124855108462, 0.139758238119, 0.070375890048, 0.104984268919, 0.145057128664,
      0.0559695313794, 0.131147540984, 0.0, 0.0816360324557, 0.139095876801, 0.115416459679, 0.0851134293757,
      0.0230170558039, 0.00629243252194, 0.138599105812, 0.0615996025832, 0.0485179665508, 0.138102334824,
      0.00231826461335)
      */
    val n = 100000
    val cols: Array[Array[Double]] = means.map{x: Double =>
      val b = new Bernoulli(x)(rand)
      (1 to n).toArray.map(y => if(b.draw()) 1.0 else 0.0)
    }
    cols.transpose
  }
}
